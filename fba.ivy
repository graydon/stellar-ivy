#lang ivy1.7

# Module for sets of elements of type t.
module set(t) = {
    type this
    relation member(E:t,S:this)

    relation empty(S:this)
    definition empty(S) = forall X. ~member(X, S)

    ## Union
    relation union(U:this, V:this, UV:this)
    definition union(U, V, UV) = forall X. (member(X, U) | member(X, V)) <-> member(X, UV)

    ## Subset
    relation is_subset(S:this, T:this)
    definition is_subset(S, T) = forall N. member(N, S) -> member(N, T)

    individual empty_set : this
    axiom forall E. ~member(E,empty_set)

    individual universe : this
    axiom forall E. member(E,universe)
}

type node
instance set_of_nodes : set(node)
# instance set_of_sets_of_nodes : set(set_of_nodes)

# Define quorum slices
relation is_quorum_slice(N:node, S:set_of_nodes)

## Quorum slice must contain the node itself.
axiom is_quorum_slice(N, S) -> set_of_nodes.member(N, S)

## Each node must have at least one quorum slice.
axiom exists S. (is_quorum_slice(N, S))

# Define quorums
relation is_quorum(S:set_of_nodes)
definition is_quorum(S) = ~set_of_nodes.empty(S) & forall N. (set_of_nodes.member(N, S) -> exists Q. (is_quorum_slice(N, Q) & set_of_nodes.is_subset(Q, S)))

theorem [union_of_quorums] {
    property is_quorum(U) & is_quorum(V) & set_of_nodes.union(U, V, UV) -> is_quorum(UV)
}
