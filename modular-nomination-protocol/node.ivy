#lang ivy1.7

module node(value) = {
    type t

    relation voted_for(x:value)
    relation accepted(x:value)
    relation confirmed(x:value)
    relation has_candidate_value
    relation received_vote(v:this, x:value)

    action vote_for(x:value)
    action accept(x:value)

    # Receive a vote for statement x from node v.
    action receive_vote(v:t, x:value)

    # TODO: How should I implement the quorum stuff?

    object spec = {
        before vote_for {
            assert ~has_candidate_value;
        }

        after receive_vote {
            assert v.voted_for(x);
            assert received_vote(v, x);
        }

        before accept {
            # Assert that one of the two conditions to accept has been met.
        }
    }

    object impl = {
        implement vote_for {
            voted_for(x) := true;
            if (exists S . is_my_quorum(S) & (forall V . S.member(V) -> received_vote(V, x))) {
                # This is one of the conditions for accepting.
                call accept(x);
            }
        }

        implement receive_vote {
            received_vote(v, x) := true;
            if (exists S . is_my_quorum(S) & (forall V . S.member(V) -> received_vote(V, x))) {
                # This is one of the conditions for accepting.
                call accept(x);
            }
            # Implement the second condition.
        }
    }
}

module network(node, value) = {
    action enqueue_vote(v:node, x:value)

    # This tells node a that node b voted for value x.
    action deliver_vote(a:node, b:node, x:value)

    relation enqueued_vote(v:node, x:value)

    object spec = {
        after enqueue_vote {
            assert enqueued_vote(v, x);
            call v.voted_for(x);
        }
        before deliver_vote {
            assert enqueued_vote(b, x);
        }
        after deliver_vote {
            assert a.received_vote(b, x);
        }
    }

    object impl = {
        implement enqueue_vote(v:node, x:value) {
            enqueued_vote(v, x) := true;
        }
        implement deliver_vote {
            call a.receive_vote(b, x);
        }
    }
}
