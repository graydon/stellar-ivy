#lang ivy1.7

# Module for sets of elements of type t.
module set(t) = {
    type this
    relation member(E:t,S:this)

    relation empty(S:this)
    definition empty(S) = forall X. ~member(X, S)

    ## Union
    relation union(U:this, V:this, UV:this)
    definition union(U, V, UV) = forall X. (member(X, U) | member(X, V)) <-> member(X, UV)

    ## Intersection
    relation intersection(U:this, V:this, UV:this)
    definition intersection(U, V, UV) = forall X. (member(X, U) & member(X, V)) <-> member(X, UV)

    ## Subset
    relation subset(S:this, T:this)
    definition subset(S, T) = forall N. member(N, S) -> member(N, T)

    ## Subtract (S \ T = U)
    relation subtract(S:this, T:this, U:this)
    definition subtract(S, T, U) = forall N. (member(N, S) & ~member(N, T)) <-> member(N, U)

    individual empty_set : this
    axiom forall E. ~member(E,empty_set)

    individual universe : this
    axiom forall E. member(E,universe)
}

type node
instance set_of_nodes : set(node)

isolate fbas = {
    individual nodes : set_of_nodes

    # Define quorum slices
    relation is_quorum_slice(N:node, S:set_of_nodes)

    ## Quorum slice must contain the node itself.
    axiom set_of_nodes.member(N, nodes) & is_quorum_slice(N, S) -> set_of_nodes.subset(S, nodes)

    ## Quorum slice must contain the node itself.
    axiom set_of_nodes.member(N, nodes) & set_of_nodes.subset(S, nodes) -> (is_quorum_slice(N, S) -> set_of_nodes.member(N, S))

    ## Each node must have at least one quorum slice.
    axiom set_of_nodes.member(N, nodes) & set_of_nodes.subset(S, nodes) -> exists S. (is_quorum_slice(N, S))

    # Define quorums
    relation is_quorum(S:set_of_nodes)
    definition is_quorum(S) =
        ~set_of_nodes.empty(S) &
        set_of_nodes.subset(S, nodes) &
        forall N. (set_of_nodes.member(N, S) -> exists Q. (is_quorum_slice(N, Q) & set_of_nodes.subset(Q, S)))

    relation v_blocking(V:node, B:set_of_nodes)
        = forall Sl, I. (is_quorum_slice(V, Sl) & set_of_nodes.intersection(Sl, B, I) -> ~set_of_nodes.empty(I))
}

# The union of two quorums is a quorum.
theorem [union_of_quorums] {
    property fbas.is_quorum(U) & fbas.is_quorum(V) & set_of_nodes.union(U, V, UV) -> fbas.is_quorum(UV)
}

# The union of two v-blocking sets is v-blocking
theorem [v_blocking_union] {
    property fbas.v_blocking(V, B1) & fbas.v_blocking(V, B2) & set_of_nodes.union(B1, B2, B) -> fbas.v_blocking(V, B)
}

# Any superset of a v-blocking set is v-blocking
theorem [v_blocking_superset] {
    property fbas.v_blocking(V, B) & set_of_nodes.subset(B, BB) -> fbas.v_blocking(V, BB)
}
