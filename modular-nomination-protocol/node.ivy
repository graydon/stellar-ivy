#lang ivy1.7

include set

module node(value, id) = {
    type t
    instance nset : set(t)

    relation voted_for(V:t, X:value)
    relation accepted(V:t, X:value)
    relation confirmed(V:t, X:value)
    relation has_candidate_value(V:t)
    relation received_vote(V:t, V:t, X:value)
    relation is_quorum_slice(V:t, S:nset)

    action vote_for(v:t, x:value)
    action accept(v:t, x:value)

    # Receive a vote for statement x from node v.
    action receive_vote(v:t, w:t, x:value)

    relation is_quorum(V:t, S:nset)
    definition is_quorum(V, S) =
        nset.member(V, S) &
        (forall W . nset.member(W, S) -> (exists T . is_quorum_slice(W, T) & nset.subset(T, S)))

    object spec = {
        before vote_for {
            assert ~v.has_candidate_value;
        }

        after receive_vote {
            assert v.voted_for(x);
            assert v.received_vote(w, x);
        }

        before accept {
            # Assert that one of the two conditions to accept has been met.
        }
    }

    object impl = {
        implement vote_for {
            v.voted_for(x) := true;
            # TODO: Update this to the correct condition to accept.
            if (exists Q.
                    (v.is_quorum(Q) &
                     forall V . nset.member(V, Q) -> v.received_vote(V, x))) { 
                call v.accept(x);
            }
            # TODO: Check if v can confirm x.
        }

        implement receive_vote {
            v.received_vote(w, x) := true;
            # Todo: Finish this.
        }
    }
}
